m2l-tree;
#setup




var2 bit1;
var2 bit2;
pred is_fusion(var1 x) = x in bit1 & x in bit2;
pred is_forget(var1 x) = x notin bit1 & x notin bit2;
pred is_vertex(var1 x) = x in bit1 & x notin bit2;
pred is_edge(var1 x) = x notin bit1 & x in bit2;
pred is_tree_constant(var1 x) = is_edge(x) | is_vertex(x);


var2 n0;

var2 num1_bit0, num1_bit1;

var2 n1;

var2 num2_bit0, num2_bit1;

pred $U2(var2 X) = empty(X inter (bit1 union bit2));
pred $U1(var1 x) = is_forget(x);

$ = {root, root.0, root.00, root.000, root.001, root.0010, root.00100, root.00101, root.001010, root.0010100, root.0010101, root.00101010};
assert bit1 = {root.001010, root.0010, root.00};
assert bit2 = {root.00101010, root.0010100, root.001010, root.00100, root.0010, root.000, root.00};
assert num1_bit0 = {root.00101, root.0};
assert num2_bit0 = {root.00101010, root.0010100, root.00100, root.000};



pred same1(var1 x,y) = (x in num1_bit0 <=> y in num1_bit0) & (x in num1_bit1 <=> y in num1_bit1);

pred same2(var1 x,y) = (x in num1_bit0 <=> y in num2_bit0) & (x in num1_bit1 <=> y in num2_bit1);

pred same(var1 x,y) = (( is_vertex(y) & same1(x,y) ) | (is_edge(y) & (same1(x,y) | same2(x,y) )));

pred forgets(var1 v, var1 e) = v < e & is_forget(v) & same(v,e) & all1 x: (v<x & x<e & is_forget(x)) => ~same(x,v);

pred incident(var1 v, var1 e) = is_edge(e) & forgets(v,e);


pred all_ports_forgot(var1 x) = ( is_edge(x) => ex1 y1,y2: y1~=y2 & forgets(y1,x) & forgets(y2,x) ) &
				( is_vertex(x) => ex1 y: forgets(y,x) );



#free predicates
pred leaf(var1 x) = all1 y: (~x<y);



pred defined(var1 x) = is_edge(x) => ~same2(x,x);

pred domain() = all1 x: defined(x) &
			( leaf(x) <=> is_tree_constant(x) ) &
			( leaf(x) => all_ports_forgot(x) ) &
			( is_forget(x) => (all1 y: x.1 ~= y) )& 
			( is_forget(x) => ex1 y: forgets(x,y) )&
			( is_fusion(x) => ex1 y0,y1: x.0 = y0 & x.1 = y1) ;



pred edge(var1 u, var1 v) = ex1 e: u~= v & incident(u,e) & incident(v,e);


 
assert domain();

true;
